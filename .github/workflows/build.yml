name: ARM32 Windows Build

on: [push, pull_request, workflow_dispatch]

jobs:
  build_on_ubuntu:
    name: Cross Compile for ${{ matrix.config.plat }} (${{ matrix.config.arch }}${{ matrix.config.bits }}) on Ubuntu
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        config:
          - { plat: "Windows", bits: 32, arch: "ARM" }

    steps:
      - uses: actions/checkout@v2
      
      # Dependencies
      - name: Install Dependencies for MXE
        run: |
            sudo apt-get -y update \
            && sudo apt-get -y install autoconf automake autopoint bash bison bzip2 flex g++ g++-multilib gettext git gperf intltool libc6-dev-i386 libgdk-pixbuf2.0-dev libltdl-dev libgl-dev libssl-dev libtool-bin libxml-parser-perl lzip make openssl p7zip-full patch perl python3 python3-mako python3-pkg-resources ruby sed unzip wget xz-utils

      - name: Set Up ARM32 MXE
        run: |
          cd $HOME
          git clone https://github.com/armdevvel/mxe-SHARED --depth 1 armmxe-shared
          cd armmxe-shared
          make DFEAULT_MAX_JOBS=8 llvm-mingw

      # Build pre-requisites
      - name: Add ARM32 MXE to PATH
        run: |
          echo $HOME/armmxe-shared >> $GITHUB_PATH

      # Build
      - name: Build ClassiCube for ${{ matrix.config.plat }} (${{ matrix.config.arch }}${{ matrix.config.bits }})
        run: |
          cd ${{ github.workspace }}
          cd src
          make mingw CC="armv7-w64-mingw32-gcc"

      # Set up folder for release
      - name: Set Up Folder with EXE and Depedencies for Release
        run: |
          cd ${{ github.workspace }}
          mkdir -p ${{ github.workspace }}/release/ClassiCube
          cd ${{ github.workspace }}/release
          cp ${{ github.workspace }}/src/ClassiCube.exe ClassiCube
          cp $HOME/armmxe-shared/usr/armv7-w64-mingw32/bin/libc++.dll ClassiCube
          cp $HOME/armmxe-shared/usr/armv7-w64-mingw32/bin/libssp-0.dll ClassiCube
          cp $HOME/armmxe-shared/usr/armv7-w64-mingw32/bin/libunwind.dll ClassiCube
          cp $HOME/armmxe-shared/usr/armv7-w64-mingw32/bin/libwinpthread-1.dll ClassiCube
          
      # Get short SHA
      - name: Get Short SHA
        run: echo "SHORT_SHA=`git rev-parse --short HEAD`" >> $GITHUB_ENV
          
      # Create release ZIP
      - name: Create Release ZIP
        uses: vimtor/action-zip@v1
        with:
          files: ${{ github.workspace }}/release
          dest: ${{ github.workspace }}/ClassiCube-${{ env.SHORT_SHA }}.zip
      
      # Create release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.SHORT_SHA }}
          release_name: ClassiCube Release ${{ env.SHORT_SHA }} (${{ matrix.config.plat }} ${{ matrix.config.arch }}${{ matrix.config.bits }})
          draft: false
          prerelease: false

      # Upload release
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/ClassiCube-${{ env.SHORT_SHA }}.zip
          asset_name: ClassiCube-${{ env.SHORT_SHA }}.zip
          asset_content_type: application/zip
